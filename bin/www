#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('njks:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

var numberOfUsers = 0;

/**
* Array for chat history
*/
var savedMessage = [];
io.on('connection', socket => {
  var addedUser = false;
  socket.on('chat message', msg => {
    console.log('got a chat messaage!' + ': ' + msg)
    //Add chat message to chat history
    var usernameString = "";
    usernameString = socket.username;
    var theMessage = {
      id: socket.id + Date.now(),
      username: usernameString, 
      message: msg
    }
    console.log(theMessage)
    savedMessage.push(theMessage);
    //If chat history is over 49 messages long, delete the oldest entry
    if (savedMessage.length == 50) {
      savedMessage.shift();
    }

    io.emit('chat message', {
      id: socket.id + Date.now(),
      username: socket.username,
      message: msg,
    });
  });

  socket.on('add user', username => {
    if (addedUser) return;

    socket.username = username;
    ++numberOfUsers;
    addedUser = true;

  });

  socket.on('user joined', username => {
    if (!addedUser) {
      socket.username = username;
      ++numberOfUsers;
      addedUser = true;
    }
    for (var i = 0; i < savedMessage.length; i++) {
     socket.emit('chat message', {
       username: savedMessage[i].username,
       message: savedMessage[i].message
     });
    }
    console.log(socket.username)
    socket.broadcast.emit('user joined', {
      username: socket.username,
      prefix: "User ",
      postfix: " joined"
    });

  });

  // socket.on('disconnect', function () {
  //   if (addedUser) {
  //     --numberOfUsers;
  //
  //     io.emit('user left', {
  //       username: socket.username,
  //       numberOfUsers: numberOfUsers
  //     });
  //   }
  // });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
